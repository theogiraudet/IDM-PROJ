/*
 * generated by Xtext 2.25.0
 */
package fr.istic.idm.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SwagGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.Swag.Path");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRootPathParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexPathParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Path:
		//    RootPath | ComplexPath
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RootPath | ComplexPath
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RootPath
		public RuleCall getRootPathParserRuleCall_0() { return cRootPathParserRuleCall_0; }
		
		//ComplexPath
		public RuleCall getComplexPathParserRuleCall_1() { return cComplexPathParserRuleCall_1; }
	}
	public class RootPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.Swag.RootPath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRootPathAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//RootPath: {RootPath}
		//    '.'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{RootPath}
		//   '.'
		public Group getGroup() { return cGroup; }
		
		//{RootPath}
		public Action getRootPathAction_0() { return cRootPathAction_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}
	public class ComplexPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.Swag.ComplexPath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComplexPathAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNodesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNodesNodeParserRuleCall_1_0_0 = (RuleCall)cNodesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNodesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNodesNodeParserRuleCall_1_1_1_0 = (RuleCall)cNodesAssignment_1_1_1.eContents().get(0);
		
		//ComplexPath: {ComplexPath}
		//    (nodes+=Node ('.' nodes+=Node)*)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ComplexPath}
		//   (nodes+=Node ('.' nodes+=Node)*)?
		public Group getGroup() { return cGroup; }
		
		//{ComplexPath}
		public Action getComplexPathAction_0() { return cComplexPathAction_0; }
		
		//(nodes+=Node ('.' nodes+=Node)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//nodes+=Node
		public Assignment getNodesAssignment_1_0() { return cNodesAssignment_1_0; }
		
		//Node
		public RuleCall getNodesNodeParserRuleCall_1_0_0() { return cNodesNodeParserRuleCall_1_0_0; }
		
		//('.' nodes+=Node)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }
		
		//nodes+=Node
		public Assignment getNodesAssignment_1_1_1() { return cNodesAssignment_1_1_1; }
		
		//Node
		public RuleCall getNodesNodeParserRuleCall_1_1_1_0() { return cNodesNodeParserRuleCall_1_1_1_0; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.Swag.Node");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArrayNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBasicNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Node:
		//    ArrayNode | BasicNode;
		@Override public ParserRule getRule() { return rule; }
		
		//ArrayNode | BasicNode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ArrayNode
		public RuleCall getArrayNodeParserRuleCall_0() { return cArrayNodeParserRuleCall_0; }
		
		//BasicNode
		public RuleCall getBasicNodeParserRuleCall_1() { return cBasicNodeParserRuleCall_1; }
	}
	public class BasicNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.Swag.BasicNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBasicNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cStrAlternatives_1_0 = (Alternatives)cStrAssignment_1.eContents().get(0);
		private final RuleCall cStrIDTerminalRuleCall_1_0_0 = (RuleCall)cStrAlternatives_1_0.eContents().get(0);
		private final RuleCall cStrSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cStrAlternatives_1_0.eContents().get(1);
		
		//BasicNode: {BasicNode}
		//    str=(ID | STRING)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{BasicNode}
		//   str=(ID | STRING)
		public Group getGroup() { return cGroup; }
		
		//{BasicNode}
		public Action getBasicNodeAction_0() { return cBasicNodeAction_0; }
		
		//str=(ID | STRING)
		public Assignment getStrAssignment_1() { return cStrAssignment_1; }
		
		//(ID | STRING)
		public Alternatives getStrAlternatives_1_0() { return cStrAlternatives_1_0; }
		
		//ID
		public RuleCall getStrIDTerminalRuleCall_1_0_0() { return cStrIDTerminalRuleCall_1_0_0; }
		
		//STRING
		public RuleCall getStrSTRINGTerminalRuleCall_1_0_1() { return cStrSTRINGTerminalRuleCall_1_0_1; }
	}
	public class ArrayNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.Swag.ArrayNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cStrAlternatives_1_0 = (Alternatives)cStrAssignment_1.eContents().get(0);
		private final RuleCall cStrIDTerminalRuleCall_1_0_0 = (RuleCall)cStrAlternatives_1_0.eContents().get(0);
		private final RuleCall cStrSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cStrAlternatives_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFilterAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFilterListFilterParserRuleCall_3_0 = (RuleCall)cFilterAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ArrayNode: {ArrayNode}
		//    str=(ID | STRING) '['filter=ListFilter? ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ArrayNode}
		//   str=(ID | STRING) '['filter=ListFilter? ']'
		public Group getGroup() { return cGroup; }
		
		//{ArrayNode}
		public Action getArrayNodeAction_0() { return cArrayNodeAction_0; }
		
		//str=(ID | STRING)
		public Assignment getStrAssignment_1() { return cStrAssignment_1; }
		
		//(ID | STRING)
		public Alternatives getStrAlternatives_1_0() { return cStrAlternatives_1_0; }
		
		//ID
		public RuleCall getStrIDTerminalRuleCall_1_0_0() { return cStrIDTerminalRuleCall_1_0_0; }
		
		//STRING
		public RuleCall getStrSTRINGTerminalRuleCall_1_0_1() { return cStrSTRINGTerminalRuleCall_1_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//filter=ListFilter?
		public Assignment getFilterAssignment_3() { return cFilterAssignment_3; }
		
		//ListFilter
		public RuleCall getFilterListFilterParserRuleCall_3_0() { return cFilterListFilterParserRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class FilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.Swag.Filter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoundFilterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIndexFilterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPathFilterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAllFilterParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Filter:
		//    BoundFilter | IndexFilter | PathFilter | AllFilter
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BoundFilter | IndexFilter | PathFilter | AllFilter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BoundFilter
		public RuleCall getBoundFilterParserRuleCall_0() { return cBoundFilterParserRuleCall_0; }
		
		//IndexFilter
		public RuleCall getIndexFilterParserRuleCall_1() { return cIndexFilterParserRuleCall_1; }
		
		//PathFilter
		public RuleCall getPathFilterParserRuleCall_2() { return cPathFilterParserRuleCall_2; }
		
		//AllFilter
		public RuleCall getAllFilterParserRuleCall_3() { return cAllFilterParserRuleCall_3; }
	}
	public class AllFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.Swag.AllFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAllFilterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AllFilter: {AllFilter}
		//    '*'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{AllFilter}
		//   '*'
		public Group getGroup() { return cGroup; }
		
		//{AllFilter}
		public Action getAllFilterAction_0() { return cAllFilterAction_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}
	public class PathFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.Swag.PathFilter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExistFilterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEqualFilterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PathFilter:
		//    => ExistFilter | EqualFilter
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//=> ExistFilter | EqualFilter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> ExistFilter
		public RuleCall getExistFilterParserRuleCall_0() { return cExistFilterParserRuleCall_0; }
		
		//EqualFilter
		public RuleCall getEqualFilterParserRuleCall_1() { return cEqualFilterParserRuleCall_1; }
	}
	public class EqualFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.Swag.EqualFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEqualFilterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathPathParserRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueJsonValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//EqualFilter: {EqualFilter}
		//    path=Path '=' value=JsonValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{EqualFilter}
		//   path=Path '=' value=JsonValue
		public Group getGroup() { return cGroup; }
		
		//{EqualFilter}
		public Action getEqualFilterAction_0() { return cEqualFilterAction_0; }
		
		//path=Path
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//Path
		public RuleCall getPathPathParserRuleCall_1_0() { return cPathPathParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=JsonValue
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//JsonValue
		public RuleCall getValueJsonValueParserRuleCall_3_0() { return cValueJsonValueParserRuleCall_3_0; }
	}
	public class ExistFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.Swag.ExistFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExistFilterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathPathParserRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExistFilter: {ExistFilter}
		//    path=Path '?'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExistFilter}
		//   path=Path '?'
		public Group getGroup() { return cGroup; }
		
		//{ExistFilter}
		public Action getExistFilterAction_0() { return cExistFilterAction_0; }
		
		//path=Path
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//Path
		public RuleCall getPathPathParserRuleCall_1_0() { return cPathPathParserRuleCall_1_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_2() { return cQuestionMarkKeyword_2; }
	}
	public class IndexFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.Swag.IndexFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIndexFilterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIndexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexINTTerminalRuleCall_1_0 = (RuleCall)cIndexAssignment_1.eContents().get(0);
		
		//IndexFilter: {IndexFilter}
		//    index=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{IndexFilter}
		//   index=INT
		public Group getGroup() { return cGroup; }
		
		//{IndexFilter}
		public Action getIndexFilterAction_0() { return cIndexFilterAction_0; }
		
		//index=INT
		public Assignment getIndexAssignment_1() { return cIndexAssignment_1; }
		
		//INT
		public RuleCall getIndexINTTerminalRuleCall_1_0() { return cIndexINTTerminalRuleCall_1_0; }
	}
	public class BoundFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.Swag.BoundFilter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBoundFilterAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cMinAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cMinWrappedIntParserRuleCall_0_1_0_0 = (RuleCall)cMinAssignment_0_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cMaxAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cMaxWrappedIntParserRuleCall_0_1_2_0 = (RuleCall)cMaxAssignment_0_1_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMaxAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMaxWrappedIntParserRuleCall_1_1_0 = (RuleCall)cMaxAssignment_1_1.eContents().get(0);
		
		//BoundFilter: {BoundFilter}
		//    (min=WrappedInt ".." (max=WrappedInt)?) | (".." max=WrappedInt)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{BoundFilter}
		//   (min=WrappedInt ".." (max=WrappedInt)?) | (".." max=WrappedInt)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BoundFilter}
		//   (min=WrappedInt ".." (max=WrappedInt)?)
		public Group getGroup_0() { return cGroup_0; }
		
		//{BoundFilter}
		public Action getBoundFilterAction_0_0() { return cBoundFilterAction_0_0; }
		
		//(min=WrappedInt ".." (max=WrappedInt)?)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//min=WrappedInt
		public Assignment getMinAssignment_0_1_0() { return cMinAssignment_0_1_0; }
		
		//WrappedInt
		public RuleCall getMinWrappedIntParserRuleCall_0_1_0_0() { return cMinWrappedIntParserRuleCall_0_1_0_0; }
		
		//".."
		public Keyword getFullStopFullStopKeyword_0_1_1() { return cFullStopFullStopKeyword_0_1_1; }
		
		//(max=WrappedInt)?
		public Assignment getMaxAssignment_0_1_2() { return cMaxAssignment_0_1_2; }
		
		//WrappedInt
		public RuleCall getMaxWrappedIntParserRuleCall_0_1_2_0() { return cMaxWrappedIntParserRuleCall_0_1_2_0; }
		
		//(".." max=WrappedInt)
		public Group getGroup_1() { return cGroup_1; }
		
		//".."
		public Keyword getFullStopFullStopKeyword_1_0() { return cFullStopFullStopKeyword_1_0; }
		
		//max=WrappedInt
		public Assignment getMaxAssignment_1_1() { return cMaxAssignment_1_1; }
		
		//WrappedInt
		public RuleCall getMaxWrappedIntParserRuleCall_1_1_0() { return cMaxWrappedIntParserRuleCall_1_1_0; }
	}
	public class ListFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.Swag.ListFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListFilterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFilterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFilterFilterParserRuleCall_1_0 = (RuleCall)cFilterAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFilterAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFilterFilterParserRuleCall_2_1_0 = (RuleCall)cFilterAssignment_2_1.eContents().get(0);
		
		//// foo[1..] foo[..1] foo[1..2] foo[1]
		//ListFilter: {ListFilter}
		//    filter+=Filter (',' filter+=Filter)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ListFilter}
		//   filter+=Filter (',' filter+=Filter)*
		public Group getGroup() { return cGroup; }
		
		//{ListFilter}
		public Action getListFilterAction_0() { return cListFilterAction_0; }
		
		//filter+=Filter
		public Assignment getFilterAssignment_1() { return cFilterAssignment_1; }
		
		//Filter
		public RuleCall getFilterFilterParserRuleCall_1_0() { return cFilterFilterParserRuleCall_1_0; }
		
		//(',' filter+=Filter)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//filter+=Filter
		public Assignment getFilterAssignment_2_1() { return cFilterAssignment_2_1; }
		
		//Filter
		public RuleCall getFilterFilterParserRuleCall_2_1_0() { return cFilterFilterParserRuleCall_2_1_0; }
	}
	public class JsonValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.Swag.JsonValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJsonBooleanParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJsonNumberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJsonNullParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cJsonStringParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//JsonValue:
		//    JsonBoolean | JsonNumber | JsonNull | JsonString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//JsonBoolean | JsonNumber | JsonNull | JsonString
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JsonBoolean
		public RuleCall getJsonBooleanParserRuleCall_0() { return cJsonBooleanParserRuleCall_0; }
		
		//JsonNumber
		public RuleCall getJsonNumberParserRuleCall_1() { return cJsonNumberParserRuleCall_1; }
		
		//JsonNull
		public RuleCall getJsonNullParserRuleCall_2() { return cJsonNullParserRuleCall_2; }
		
		//JsonString
		public RuleCall getJsonStringParserRuleCall_3() { return cJsonStringParserRuleCall_3; }
	}
	public class JsonNullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.Swag.JsonNull");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJsonNullAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//JsonNull: {JsonNull}
		//    "null"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{JsonNull}
		//   "null"
		public Group getGroup() { return cGroup; }
		
		//{JsonNull}
		public Action getJsonNullAction_0() { return cJsonNullAction_0; }
		
		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}
	public class JsonNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.Swag.JsonNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJsonNumberAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumberINTTerminalRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//JsonNumber: {JsonNumber}
		//    number=INT ('.' INT)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{JsonNumber}
		//   number=INT ('.' INT)?
		public Group getGroup() { return cGroup; }
		
		//{JsonNumber}
		public Action getJsonNumberAction_0() { return cJsonNumberAction_0; }
		
		//number=INT
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_1_0() { return cNumberINTTerminalRuleCall_1_0; }
		
		//('.' INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}
	public class JsonBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.Swag.JsonBoolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJsonBooleanAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBoolAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cBoolAlternatives_1_0 = (Alternatives)cBoolAssignment_1.eContents().get(0);
		private final Keyword cBoolTrueKeyword_1_0_0 = (Keyword)cBoolAlternatives_1_0.eContents().get(0);
		private final Keyword cBoolFalseKeyword_1_0_1 = (Keyword)cBoolAlternatives_1_0.eContents().get(1);
		
		//JsonBoolean: {JsonBoolean}
		//    bool=("true" | "false")
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{JsonBoolean}
		//   bool=("true" | "false")
		public Group getGroup() { return cGroup; }
		
		//{JsonBoolean}
		public Action getJsonBooleanAction_0() { return cJsonBooleanAction_0; }
		
		//bool=("true" | "false")
		public Assignment getBoolAssignment_1() { return cBoolAssignment_1; }
		
		//("true" | "false")
		public Alternatives getBoolAlternatives_1_0() { return cBoolAlternatives_1_0; }
		
		//"true"
		public Keyword getBoolTrueKeyword_1_0_0() { return cBoolTrueKeyword_1_0_0; }
		
		//"false"
		public Keyword getBoolFalseKeyword_1_0_1() { return cBoolFalseKeyword_1_0_1; }
	}
	public class JsonStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.Swag.JsonString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJsonStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//JsonString: {JsonString}
		//    value=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{JsonString}
		//   value=STRING
		public Group getGroup() { return cGroup; }
		
		//{JsonString}
		public Action getJsonStringAction_0() { return cJsonStringAction_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class WrappedIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.idm.Swag.WrappedInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWrappedIntAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumberINTTerminalRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		
		//WrappedInt: {WrappedInt}
		//    number=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{WrappedInt}
		//   number=INT
		public Group getGroup() { return cGroup; }
		
		//{WrappedInt}
		public Action getWrappedIntAction_0() { return cWrappedIntAction_0; }
		
		//number=INT
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_1_0() { return cNumberINTTerminalRuleCall_1_0; }
	}
	
	
	private final PathElements pPath;
	private final RootPathElements pRootPath;
	private final ComplexPathElements pComplexPath;
	private final NodeElements pNode;
	private final BasicNodeElements pBasicNode;
	private final ArrayNodeElements pArrayNode;
	private final FilterElements pFilter;
	private final AllFilterElements pAllFilter;
	private final PathFilterElements pPathFilter;
	private final EqualFilterElements pEqualFilter;
	private final ExistFilterElements pExistFilter;
	private final IndexFilterElements pIndexFilter;
	private final BoundFilterElements pBoundFilter;
	private final ListFilterElements pListFilter;
	private final JsonValueElements pJsonValue;
	private final JsonNullElements pJsonNull;
	private final JsonNumberElements pJsonNumber;
	private final JsonBooleanElements pJsonBoolean;
	private final JsonStringElements pJsonString;
	private final WrappedIntElements pWrappedInt;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SwagGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPath = new PathElements();
		this.pRootPath = new RootPathElements();
		this.pComplexPath = new ComplexPathElements();
		this.pNode = new NodeElements();
		this.pBasicNode = new BasicNodeElements();
		this.pArrayNode = new ArrayNodeElements();
		this.pFilter = new FilterElements();
		this.pAllFilter = new AllFilterElements();
		this.pPathFilter = new PathFilterElements();
		this.pEqualFilter = new EqualFilterElements();
		this.pExistFilter = new ExistFilterElements();
		this.pIndexFilter = new IndexFilterElements();
		this.pBoundFilter = new BoundFilterElements();
		this.pListFilter = new ListFilterElements();
		this.pJsonValue = new JsonValueElements();
		this.pJsonNull = new JsonNullElements();
		this.pJsonNumber = new JsonNumberElements();
		this.pJsonBoolean = new JsonBooleanElements();
		this.pJsonString = new JsonStringElements();
		this.pWrappedInt = new WrappedIntElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.istic.idm.Swag".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Path:
	//    RootPath | ComplexPath
	//;
	public PathElements getPathAccess() {
		return pPath;
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}
	
	//RootPath: {RootPath}
	//    '.'
	//;
	public RootPathElements getRootPathAccess() {
		return pRootPath;
	}
	
	public ParserRule getRootPathRule() {
		return getRootPathAccess().getRule();
	}
	
	//ComplexPath: {ComplexPath}
	//    (nodes+=Node ('.' nodes+=Node)*)?
	//;
	public ComplexPathElements getComplexPathAccess() {
		return pComplexPath;
	}
	
	public ParserRule getComplexPathRule() {
		return getComplexPathAccess().getRule();
	}
	
	//Node:
	//    ArrayNode | BasicNode;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	//BasicNode: {BasicNode}
	//    str=(ID | STRING)
	//;
	public BasicNodeElements getBasicNodeAccess() {
		return pBasicNode;
	}
	
	public ParserRule getBasicNodeRule() {
		return getBasicNodeAccess().getRule();
	}
	
	//ArrayNode: {ArrayNode}
	//    str=(ID | STRING) '['filter=ListFilter? ']'
	//;
	public ArrayNodeElements getArrayNodeAccess() {
		return pArrayNode;
	}
	
	public ParserRule getArrayNodeRule() {
		return getArrayNodeAccess().getRule();
	}
	
	//Filter:
	//    BoundFilter | IndexFilter | PathFilter | AllFilter
	//;
	public FilterElements getFilterAccess() {
		return pFilter;
	}
	
	public ParserRule getFilterRule() {
		return getFilterAccess().getRule();
	}
	
	//AllFilter: {AllFilter}
	//    '*'
	//;
	public AllFilterElements getAllFilterAccess() {
		return pAllFilter;
	}
	
	public ParserRule getAllFilterRule() {
		return getAllFilterAccess().getRule();
	}
	
	//PathFilter:
	//    => ExistFilter | EqualFilter
	//;
	public PathFilterElements getPathFilterAccess() {
		return pPathFilter;
	}
	
	public ParserRule getPathFilterRule() {
		return getPathFilterAccess().getRule();
	}
	
	//EqualFilter: {EqualFilter}
	//    path=Path '=' value=JsonValue
	//;
	public EqualFilterElements getEqualFilterAccess() {
		return pEqualFilter;
	}
	
	public ParserRule getEqualFilterRule() {
		return getEqualFilterAccess().getRule();
	}
	
	//ExistFilter: {ExistFilter}
	//    path=Path '?'
	//;
	public ExistFilterElements getExistFilterAccess() {
		return pExistFilter;
	}
	
	public ParserRule getExistFilterRule() {
		return getExistFilterAccess().getRule();
	}
	
	//IndexFilter: {IndexFilter}
	//    index=INT
	//;
	public IndexFilterElements getIndexFilterAccess() {
		return pIndexFilter;
	}
	
	public ParserRule getIndexFilterRule() {
		return getIndexFilterAccess().getRule();
	}
	
	//BoundFilter: {BoundFilter}
	//    (min=WrappedInt ".." (max=WrappedInt)?) | (".." max=WrappedInt)
	//;
	public BoundFilterElements getBoundFilterAccess() {
		return pBoundFilter;
	}
	
	public ParserRule getBoundFilterRule() {
		return getBoundFilterAccess().getRule();
	}
	
	//// foo[1..] foo[..1] foo[1..2] foo[1]
	//ListFilter: {ListFilter}
	//    filter+=Filter (',' filter+=Filter)*
	//;
	public ListFilterElements getListFilterAccess() {
		return pListFilter;
	}
	
	public ParserRule getListFilterRule() {
		return getListFilterAccess().getRule();
	}
	
	//JsonValue:
	//    JsonBoolean | JsonNumber | JsonNull | JsonString
	//;
	public JsonValueElements getJsonValueAccess() {
		return pJsonValue;
	}
	
	public ParserRule getJsonValueRule() {
		return getJsonValueAccess().getRule();
	}
	
	//JsonNull: {JsonNull}
	//    "null"
	//;
	public JsonNullElements getJsonNullAccess() {
		return pJsonNull;
	}
	
	public ParserRule getJsonNullRule() {
		return getJsonNullAccess().getRule();
	}
	
	//JsonNumber: {JsonNumber}
	//    number=INT ('.' INT)?
	//;
	public JsonNumberElements getJsonNumberAccess() {
		return pJsonNumber;
	}
	
	public ParserRule getJsonNumberRule() {
		return getJsonNumberAccess().getRule();
	}
	
	//JsonBoolean: {JsonBoolean}
	//    bool=("true" | "false")
	//;
	public JsonBooleanElements getJsonBooleanAccess() {
		return pJsonBoolean;
	}
	
	public ParserRule getJsonBooleanRule() {
		return getJsonBooleanAccess().getRule();
	}
	
	//JsonString: {JsonString}
	//    value=STRING
	//;
	public JsonStringElements getJsonStringAccess() {
		return pJsonString;
	}
	
	public ParserRule getJsonStringRule() {
		return getJsonStringAccess().getRule();
	}
	
	//WrappedInt: {WrappedInt}
	//    number=INT
	//;
	public WrappedIntElements getWrappedIntAccess() {
		return pWrappedInt;
	}
	
	public ParserRule getWrappedIntRule() {
		return getWrappedIntAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
