/**
 * generated by Xtext 2.25.0
 */
package fr.istic.idm.swag.impl;

import fr.istic.idm.swag.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SwagFactoryImpl extends EFactoryImpl implements SwagFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SwagFactory init()
  {
    try
    {
      SwagFactory theSwagFactory = (SwagFactory)EPackage.Registry.INSTANCE.getEFactory(SwagPackage.eNS_URI);
      if (theSwagFactory != null)
      {
        return theSwagFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SwagFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SwagFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SwagPackage.PATH: return createPath();
      case SwagPackage.ROOT_PATH: return createRootPath();
      case SwagPackage.COMPLEX_PATH: return createComplexPath();
      case SwagPackage.NODE: return createNode();
      case SwagPackage.BASIC_NODE: return createBasicNode();
      case SwagPackage.ARRAY_NODE: return createArrayNode();
      case SwagPackage.FILTER: return createFilter();
      case SwagPackage.ALL_FILTER: return createAllFilter();
      case SwagPackage.PATH_FILTER: return createPathFilter();
      case SwagPackage.EQUAL_FILTER: return createEqualFilter();
      case SwagPackage.EXIST_FILTER: return createExistFilter();
      case SwagPackage.INDEX_FILTER: return createIndexFilter();
      case SwagPackage.BOUND_FILTER: return createBoundFilter();
      case SwagPackage.LIST_FILTER: return createListFilter();
      case SwagPackage.JSON_VALUE: return createJsonValue();
      case SwagPackage.JSON_NULL: return createJsonNull();
      case SwagPackage.JSON_NUMBER: return createJsonNumber();
      case SwagPackage.JSON_BOOLEAN: return createJsonBoolean();
      case SwagPackage.JSON_STRING: return createJsonString();
      case SwagPackage.WRAPPED_INT: return createWrappedInt();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Path createPath()
  {
    PathImpl path = new PathImpl();
    return path;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RootPath createRootPath()
  {
    RootPathImpl rootPath = new RootPathImpl();
    return rootPath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComplexPath createComplexPath()
  {
    ComplexPathImpl complexPath = new ComplexPathImpl();
    return complexPath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Node createNode()
  {
    NodeImpl node = new NodeImpl();
    return node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BasicNode createBasicNode()
  {
    BasicNodeImpl basicNode = new BasicNodeImpl();
    return basicNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayNode createArrayNode()
  {
    ArrayNodeImpl arrayNode = new ArrayNodeImpl();
    return arrayNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Filter createFilter()
  {
    FilterImpl filter = new FilterImpl();
    return filter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AllFilter createAllFilter()
  {
    AllFilterImpl allFilter = new AllFilterImpl();
    return allFilter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PathFilter createPathFilter()
  {
    PathFilterImpl pathFilter = new PathFilterImpl();
    return pathFilter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EqualFilter createEqualFilter()
  {
    EqualFilterImpl equalFilter = new EqualFilterImpl();
    return equalFilter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExistFilter createExistFilter()
  {
    ExistFilterImpl existFilter = new ExistFilterImpl();
    return existFilter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IndexFilter createIndexFilter()
  {
    IndexFilterImpl indexFilter = new IndexFilterImpl();
    return indexFilter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BoundFilter createBoundFilter()
  {
    BoundFilterImpl boundFilter = new BoundFilterImpl();
    return boundFilter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListFilter createListFilter()
  {
    ListFilterImpl listFilter = new ListFilterImpl();
    return listFilter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonValue createJsonValue()
  {
    JsonValueImpl jsonValue = new JsonValueImpl();
    return jsonValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonNull createJsonNull()
  {
    JsonNullImpl jsonNull = new JsonNullImpl();
    return jsonNull;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonNumber createJsonNumber()
  {
    JsonNumberImpl jsonNumber = new JsonNumberImpl();
    return jsonNumber;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonBoolean createJsonBoolean()
  {
    JsonBooleanImpl jsonBoolean = new JsonBooleanImpl();
    return jsonBoolean;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonString createJsonString()
  {
    JsonStringImpl jsonString = new JsonStringImpl();
    return jsonString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WrappedInt createWrappedInt()
  {
    WrappedIntImpl wrappedInt = new WrappedIntImpl();
    return wrappedInt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SwagPackage getSwagPackage()
  {
    return (SwagPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SwagPackage getPackage()
  {
    return SwagPackage.eINSTANCE;
  }

} //SwagFactoryImpl
