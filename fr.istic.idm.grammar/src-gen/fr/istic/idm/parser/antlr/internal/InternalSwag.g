/*
 * generated by Xtext 2.25.0
 */
grammar InternalSwag;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.istic.idm.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.istic.idm.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.istic.idm.services.SwagGrammarAccess;

}

@parser::members {

 	private SwagGrammarAccess grammarAccess;

    public InternalSwagParser(TokenStream input, SwagGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Path";
   	}

   	@Override
   	protected SwagGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulePath
entryRulePath returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPathRule()); }
	iv_rulePath=rulePath
	{ $current=$iv_rulePath.current; }
	EOF;

// Rule Path
rulePath returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPathAccess().getRootPathParserRuleCall_0());
		}
		this_RootPath_0=ruleRootPath
		{
			$current = $this_RootPath_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPathAccess().getComplexPathParserRuleCall_1());
		}
		this_ComplexPath_1=ruleComplexPath
		{
			$current = $this_ComplexPath_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRootPath
entryRuleRootPath returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRootPathRule()); }
	iv_ruleRootPath=ruleRootPath
	{ $current=$iv_ruleRootPath.current; }
	EOF;

// Rule RootPath
ruleRootPath returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRootPathAccess().getRootPathAction_0(),
					$current);
			}
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getRootPathAccess().getFullStopKeyword_1());
		}
	)
;

// Entry rule entryRuleComplexPath
entryRuleComplexPath returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComplexPathRule()); }
	iv_ruleComplexPath=ruleComplexPath
	{ $current=$iv_ruleComplexPath.current; }
	EOF;

// Rule ComplexPath
ruleComplexPath returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getComplexPathAccess().getComplexPathAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getComplexPathAccess().getNodesNodeParserRuleCall_1_0_0());
					}
					lv_nodes_1_0=ruleNode
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComplexPathRule());
						}
						add(
							$current,
							"nodes",
							lv_nodes_1_0,
							"fr.istic.idm.Swag.Node");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2='.'
				{
					newLeafNode(otherlv_2, grammarAccess.getComplexPathAccess().getFullStopKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getComplexPathAccess().getNodesNodeParserRuleCall_1_1_1_0());
						}
						lv_nodes_3_0=ruleNode
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getComplexPathRule());
							}
							add(
								$current,
								"nodes",
								lv_nodes_3_0,
								"fr.istic.idm.Swag.Node");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleNode
entryRuleNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeRule()); }
	iv_ruleNode=ruleNode
	{ $current=$iv_ruleNode.current; }
	EOF;

// Rule Node
ruleNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNodeAccess().getArrayNodeParserRuleCall_0());
		}
		this_ArrayNode_0=ruleArrayNode
		{
			$current = $this_ArrayNode_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNodeAccess().getBasicNodeParserRuleCall_1());
		}
		this_BasicNode_1=ruleBasicNode
		{
			$current = $this_BasicNode_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBasicNode
entryRuleBasicNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBasicNodeRule()); }
	iv_ruleBasicNode=ruleBasicNode
	{ $current=$iv_ruleBasicNode.current; }
	EOF;

// Rule BasicNode
ruleBasicNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBasicNodeAccess().getBasicNodeAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_str_1_1=RULE_ID
					{
						newLeafNode(lv_str_1_1, grammarAccess.getBasicNodeAccess().getStrIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBasicNodeRule());
						}
						setWithLastConsumed(
							$current,
							"str",
							lv_str_1_1,
							"org.eclipse.xtext.common.Terminals.ID");
					}
					    |
					lv_str_1_2=RULE_STRING
					{
						newLeafNode(lv_str_1_2, grammarAccess.getBasicNodeAccess().getStrSTRINGTerminalRuleCall_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBasicNodeRule());
						}
						setWithLastConsumed(
							$current,
							"str",
							lv_str_1_2,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleArrayNode
entryRuleArrayNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayNodeRule()); }
	iv_ruleArrayNode=ruleArrayNode
	{ $current=$iv_ruleArrayNode.current; }
	EOF;

// Rule ArrayNode
ruleArrayNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getArrayNodeAccess().getArrayNodeAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_str_1_1=RULE_ID
					{
						newLeafNode(lv_str_1_1, grammarAccess.getArrayNodeAccess().getStrIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getArrayNodeRule());
						}
						setWithLastConsumed(
							$current,
							"str",
							lv_str_1_1,
							"org.eclipse.xtext.common.Terminals.ID");
					}
					    |
					lv_str_1_2=RULE_STRING
					{
						newLeafNode(lv_str_1_2, grammarAccess.getArrayNodeAccess().getStrSTRINGTerminalRuleCall_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getArrayNodeRule());
						}
						setWithLastConsumed(
							$current,
							"str",
							lv_str_1_2,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getArrayNodeAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayNodeAccess().getFilterListFilterParserRuleCall_3_0());
				}
				lv_filter_3_0=ruleListFilter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayNodeRule());
					}
					set(
						$current,
						"filter",
						lv_filter_3_0,
						"fr.istic.idm.Swag.ListFilter");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getArrayNodeAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleFilter
entryRuleFilter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFilterRule()); }
	iv_ruleFilter=ruleFilter
	{ $current=$iv_ruleFilter.current; }
	EOF;

// Rule Filter
ruleFilter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFilterAccess().getBoundFilterParserRuleCall_0());
		}
		this_BoundFilter_0=ruleBoundFilter
		{
			$current = $this_BoundFilter_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFilterAccess().getIndexFilterParserRuleCall_1());
		}
		this_IndexFilter_1=ruleIndexFilter
		{
			$current = $this_IndexFilter_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFilterAccess().getPathFilterParserRuleCall_2());
		}
		this_PathFilter_2=rulePathFilter
		{
			$current = $this_PathFilter_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFilterAccess().getAllFilterParserRuleCall_3());
		}
		this_AllFilter_3=ruleAllFilter
		{
			$current = $this_AllFilter_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAllFilter
entryRuleAllFilter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAllFilterRule()); }
	iv_ruleAllFilter=ruleAllFilter
	{ $current=$iv_ruleAllFilter.current; }
	EOF;

// Rule AllFilter
ruleAllFilter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAllFilterAccess().getAllFilterAction_0(),
					$current);
			}
		)
		otherlv_1='*'
		{
			newLeafNode(otherlv_1, grammarAccess.getAllFilterAccess().getAsteriskKeyword_1());
		}
	)
;

// Entry rule entryRulePathFilter
entryRulePathFilter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPathFilterRule()); }
	iv_rulePathFilter=rulePathFilter
	{ $current=$iv_rulePathFilter.current; }
	EOF;

// Rule PathFilter
rulePathFilter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleExistFilter)=>
			{
				newCompositeNode(grammarAccess.getPathFilterAccess().getExistFilterParserRuleCall_0());
			}
			this_ExistFilter_0=ruleExistFilter
			{
				$current = $this_ExistFilter_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getPathFilterAccess().getEqualFilterParserRuleCall_1());
		}
		this_EqualFilter_1=ruleEqualFilter
		{
			$current = $this_EqualFilter_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEqualFilter
entryRuleEqualFilter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualFilterRule()); }
	iv_ruleEqualFilter=ruleEqualFilter
	{ $current=$iv_ruleEqualFilter.current; }
	EOF;

// Rule EqualFilter
ruleEqualFilter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEqualFilterAccess().getEqualFilterAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEqualFilterAccess().getPathPathParserRuleCall_1_0());
				}
				lv_path_1_0=rulePath
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEqualFilterRule());
					}
					set(
						$current,
						"path",
						lv_path_1_0,
						"fr.istic.idm.Swag.Path");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getEqualFilterAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEqualFilterAccess().getValueJsonValueParserRuleCall_3_0());
				}
				lv_value_3_0=ruleJsonValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEqualFilterRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"fr.istic.idm.Swag.JsonValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExistFilter
entryRuleExistFilter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExistFilterRule()); }
	iv_ruleExistFilter=ruleExistFilter
	{ $current=$iv_ruleExistFilter.current; }
	EOF;

// Rule ExistFilter
ruleExistFilter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getExistFilterAccess().getExistFilterAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExistFilterAccess().getPathPathParserRuleCall_1_0());
				}
				lv_path_1_0=rulePath
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExistFilterRule());
					}
					set(
						$current,
						"path",
						lv_path_1_0,
						"fr.istic.idm.Swag.Path");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='?'
		{
			newLeafNode(otherlv_2, grammarAccess.getExistFilterAccess().getQuestionMarkKeyword_2());
		}
	)
;

// Entry rule entryRuleIndexFilter
entryRuleIndexFilter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIndexFilterRule()); }
	iv_ruleIndexFilter=ruleIndexFilter
	{ $current=$iv_ruleIndexFilter.current; }
	EOF;

// Rule IndexFilter
ruleIndexFilter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIndexFilterAccess().getIndexFilterAction_0(),
					$current);
			}
		)
		(
			(
				lv_index_1_0=RULE_INT
				{
					newLeafNode(lv_index_1_0, grammarAccess.getIndexFilterAccess().getIndexINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIndexFilterRule());
					}
					setWithLastConsumed(
						$current,
						"index",
						lv_index_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleBoundFilter
entryRuleBoundFilter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoundFilterRule()); }
	iv_ruleBoundFilter=ruleBoundFilter
	{ $current=$iv_ruleBoundFilter.current; }
	EOF;

// Rule BoundFilter
ruleBoundFilter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getBoundFilterAccess().getBoundFilterAction_0_0(),
						$current);
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getBoundFilterAccess().getMinWrappedIntParserRuleCall_0_1_0_0());
						}
						lv_min_1_0=ruleWrappedInt
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBoundFilterRule());
							}
							set(
								$current,
								"min",
								lv_min_1_0,
								"fr.istic.idm.Swag.WrappedInt");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_2='..'
				{
					newLeafNode(otherlv_2, grammarAccess.getBoundFilterAccess().getFullStopFullStopKeyword_0_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getBoundFilterAccess().getMaxWrappedIntParserRuleCall_0_1_2_0());
						}
						lv_max_3_0=ruleWrappedInt
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBoundFilterRule());
							}
							set(
								$current,
								"max",
								lv_max_3_0,
								"fr.istic.idm.Swag.WrappedInt");
							afterParserOrEnumRuleCall();
						}
					)
				)?
			)
		)
		    |
		(
			otherlv_4='..'
			{
				newLeafNode(otherlv_4, grammarAccess.getBoundFilterAccess().getFullStopFullStopKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBoundFilterAccess().getMaxWrappedIntParserRuleCall_1_1_0());
					}
					lv_max_5_0=ruleWrappedInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoundFilterRule());
						}
						set(
							$current,
							"max",
							lv_max_5_0,
							"fr.istic.idm.Swag.WrappedInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleListFilter
entryRuleListFilter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListFilterRule()); }
	iv_ruleListFilter=ruleListFilter
	{ $current=$iv_ruleListFilter.current; }
	EOF;

// Rule ListFilter
ruleListFilter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getListFilterAccess().getListFilterAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getListFilterAccess().getFilterFilterParserRuleCall_1_0());
				}
				lv_filter_1_0=ruleFilter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListFilterRule());
					}
					add(
						$current,
						"filter",
						lv_filter_1_0,
						"fr.istic.idm.Swag.Filter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getListFilterAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getListFilterAccess().getFilterFilterParserRuleCall_2_1_0());
					}
					lv_filter_3_0=ruleFilter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getListFilterRule());
						}
						add(
							$current,
							"filter",
							lv_filter_3_0,
							"fr.istic.idm.Swag.Filter");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleJsonValue
entryRuleJsonValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJsonValueRule()); }
	iv_ruleJsonValue=ruleJsonValue
	{ $current=$iv_ruleJsonValue.current; }
	EOF;

// Rule JsonValue
ruleJsonValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getJsonValueAccess().getJsonBooleanParserRuleCall_0());
		}
		this_JsonBoolean_0=ruleJsonBoolean
		{
			$current = $this_JsonBoolean_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getJsonValueAccess().getJsonNumberParserRuleCall_1());
		}
		this_JsonNumber_1=ruleJsonNumber
		{
			$current = $this_JsonNumber_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getJsonValueAccess().getJsonNullParserRuleCall_2());
		}
		this_JsonNull_2=ruleJsonNull
		{
			$current = $this_JsonNull_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getJsonValueAccess().getJsonStringParserRuleCall_3());
		}
		this_JsonString_3=ruleJsonString
		{
			$current = $this_JsonString_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleJsonNull
entryRuleJsonNull returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJsonNullRule()); }
	iv_ruleJsonNull=ruleJsonNull
	{ $current=$iv_ruleJsonNull.current; }
	EOF;

// Rule JsonNull
ruleJsonNull returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getJsonNullAccess().getJsonNullAction_0(),
					$current);
			}
		)
		otherlv_1='null'
		{
			newLeafNode(otherlv_1, grammarAccess.getJsonNullAccess().getNullKeyword_1());
		}
	)
;

// Entry rule entryRuleJsonNumber
entryRuleJsonNumber returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJsonNumberRule()); }
	iv_ruleJsonNumber=ruleJsonNumber
	{ $current=$iv_ruleJsonNumber.current; }
	EOF;

// Rule JsonNumber
ruleJsonNumber returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getJsonNumberAccess().getJsonNumberAction_0(),
					$current);
			}
		)
		(
			(
				lv_number_1_0=RULE_INT
				{
					newLeafNode(lv_number_1_0, grammarAccess.getJsonNumberAccess().getNumberINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJsonNumberRule());
					}
					setWithLastConsumed(
						$current,
						"number",
						lv_number_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			otherlv_2='.'
			{
				newLeafNode(otherlv_2, grammarAccess.getJsonNumberAccess().getFullStopKeyword_2_0());
			}
			this_INT_3=RULE_INT
			{
				newLeafNode(this_INT_3, grammarAccess.getJsonNumberAccess().getINTTerminalRuleCall_2_1());
			}
		)?
	)
;

// Entry rule entryRuleJsonBoolean
entryRuleJsonBoolean returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJsonBooleanRule()); }
	iv_ruleJsonBoolean=ruleJsonBoolean
	{ $current=$iv_ruleJsonBoolean.current; }
	EOF;

// Rule JsonBoolean
ruleJsonBoolean returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getJsonBooleanAccess().getJsonBooleanAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_bool_1_1='true'
					{
						newLeafNode(lv_bool_1_1, grammarAccess.getJsonBooleanAccess().getBoolTrueKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getJsonBooleanRule());
						}
						setWithLastConsumed($current, "bool", lv_bool_1_1, null);
					}
					    |
					lv_bool_1_2='false'
					{
						newLeafNode(lv_bool_1_2, grammarAccess.getJsonBooleanAccess().getBoolFalseKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getJsonBooleanRule());
						}
						setWithLastConsumed($current, "bool", lv_bool_1_2, null);
					}
				)
			)
		)
	)
;

// Entry rule entryRuleJsonString
entryRuleJsonString returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJsonStringRule()); }
	iv_ruleJsonString=ruleJsonString
	{ $current=$iv_ruleJsonString.current; }
	EOF;

// Rule JsonString
ruleJsonString returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getJsonStringAccess().getJsonStringAction_0(),
					$current);
			}
		)
		(
			(
				lv_value_1_0=RULE_STRING
				{
					newLeafNode(lv_value_1_0, grammarAccess.getJsonStringAccess().getValueSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJsonStringRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleWrappedInt
entryRuleWrappedInt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWrappedIntRule()); }
	iv_ruleWrappedInt=ruleWrappedInt
	{ $current=$iv_ruleWrappedInt.current; }
	EOF;

// Rule WrappedInt
ruleWrappedInt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getWrappedIntAccess().getWrappedIntAction_0(),
					$current);
			}
		)
		(
			(
				lv_number_1_0=RULE_INT
				{
					newLeafNode(lv_number_1_0, grammarAccess.getWrappedIntAccess().getNumberINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWrappedIntRule());
					}
					setWithLastConsumed(
						$current,
						"number",
						lv_number_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
